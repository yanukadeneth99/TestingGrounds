IMPORTANT - FORMAT :
Prefix _ BaseAssetName _ Variant _ Suffix

PascalCase
- Capitalize every word and remove all spaces, e.g. DesertEagle, StyleGuide, ASeriesOfWords.

camelCase
- The first letter is always lowercase but every following word starts with uppercase, e.g. desertEagle, styleGuide, aSeriesOfWords.

Snake_case
- Words can arbitrarily start upper or lowercase but words are separated by an underscore, e.g. desert_Eagle, Style_Guide, a_Series_of_Words.


Variables / Properties
- The words 'variable' and 'property' in most contexts are interchangable. If they are both used together in the same context however:

Property
- Usually refers to a variable defined in a class. For example, if BP_Barrel had a variable bExploded, bExploded may be referred to as a property of BP_Barrel.
- When in the context of a class, often used to imply accessing previously defined data.

Variable
- Usually refers to a variable defined as a function argument or a local variable inside a function.
- When in the context of a class, often used to convey discussion about its definition and what it will hold.
- All non-boolean variables should be in the form of PascalCase.
- Boolean b Prefix
- Arrays should be named as a plural noun.
- All Editable variables, including those marked editable just so they can be marked as Expose On Spawn, should have a description in their Tooltip fields that explains how changing this value affects the behavior of the blueprint.

Functions
- All functions must have return nodes, no exceptions.

Folders
- Always use PascalCase

Naming Conventions C++
- Template classes are prefixed by T.

- Classes that inherit from UObject are prefixed by U.

- Classes that inherit from AActor are prefixed by A.

- Classes that inherit from SWidget are prefixed by S.

- Classes that are abstract interfaces are prefixed by I.

- Enums are prefixed by E.

- Boolean variables must be prefixed by b (for example, bPendingDestruction, or bHasFadedIn).

- Most other classes are prefixed by F, though some subsystems use other letters.

- Typedefs should be prefixed by whatever is appropriate for that type: F if it's a typedef of a struct, U if it's a typedef of a UObject and so on.

Portable Alias for basic c++ class types
- bool for boolean values (NEVER assume the size of bool). BOOL will not compile.

- TCHAR for a character (NEVER assume the size of TCHAR).

- uint8 for unsigned bytes (1 byte).

- int8 for signed bytes (1 byte).

- uint16 for unsigned "shorts" (2 bytes).

- int16 for signed "shorts" (2 bytes).

- uint32 for unsigned ints (4 bytes).

- int32 for signed ints (4 bytes).

- uint64 for unsigned "quad words" (8 bytes).

- int64 for signed "quad words" (8 bytes).

- float for single precision floating point (4 bytes).

- double for double precision floating point (8 bytes).

- PTRINT for an integer that may hold a pointer (NEVER assume the size of PTRINT).

Const usage

void SomeMutatingOperation(FThing& OutResult, const TArray<Int32>& InArray)
{
    // InArray will not be modified here, but OutResult probably will be
}


void FThing::SomeNonMutatingOperation() const
{
    // This code will not modify the FThing it is invoked on
}

TArray<FString> StringArray;
for (const FString& : StringArray)
{
    // The body of this loop will not modify StringArray
}

void AddSomeThings(const int32 Count);

void AddSomeThings(const int32 Count)
{
    const int32 CountPlusOne = Count + 1;
    // Neither Count nor CountPlusOne can be changed during the body of the function
}

// Const pointer to non-const object - pointer cannot be reassigned, but T can still be modified
T* const Ptr = ...;

// Illegal
T& const Ref = ...;

// Bad - returning a const array
const TArray<FString> GetSomeArray();

// Fine - returning a reference to a const array
const TArray<FString>& GetSomeArray();

// Fine - returning a pointer to a const array
const TArray<FString>* GetSomeArray();

// Bad - returning a const pointer to a const array
const TArray<FString>* const GetSomeArray();


Type				Prefix		Suffix
			
Level (Persistent)				_P	
Level (Audio)					_Audio	
Level (Lighting)				_Lighting	
Level (Geometry)				_Geo	
Level (Gameplay)				_Gameplay			
Material			M_		
Static Mesh			SM_				
Texture				T_				
Particle System			PS_		

Aim Offset			AO_		
Aim Offset 1D			AO_		
Animation Blueprint		ABP_		
Animation Composite		AC_		
Animation Montage		AM_		
Animation Sequence		A_		
Blend Space			BS_		
Blend Space 1D			BS_		
Level Sequence			LS_		
Morph Target			MT_		
Paper Flipbook			PFB_		
Rig				Rig_		
Skeletal Mesh			SK_		
Skeleton			SK_		_Skeleton

AI Controller			AIC_		
Behavior Tree			BT_		
Blackboard			BB_		
Decorator			BTDecorator_		
Service				BTService_		
Task				BTTask_		
Environment Query		EQS_		
EnvQueryContext			EQS_		Context		

Blueprint			BP_		
Blueprint Component		BP_		Component
Blueprint Function Library	BPFL_		
Blueprint Interface		BPI_		
Blueprint Macro Library		BPML_		
Enumeration			E
Structure			F or S		
Tutorial Blueprint		TBP_		
Widget Blueprint		WBP_
Game Mode					_GameMode	

Material			M_		
Material (Post Process)		PP_		
Material Function		MF_		
Material Instance		MI_		
Material Parameter Collection	MPC_		
Subsurface Profile		SP_		
Physics Materials		PM_		
Decal				M_, MI_		_Decal

Texture				T_		
Texture(Diffuse/BaseColor)	T_		_D	
Texture (Normal)		T_		_N	
Texture (Roughness)		T_		_R	
Texture (Alpha/Opacity)		T_		_A	
Texture (Ambient Occlusion)	T_		_O	
Texture (Bump)			T_		_B	
Texture (Emissive)		T_		_E	
Texture (Mask)			T_		_M	
Texture (Specular)		T_		_S	
Texture (Metallic)		T_		_M	
Texture (Packed)		T_		_*
Texture Cube			TC_		
Media Texture			MT_		
Render Target			RT_		
Cube Render Target		RTC_		
Texture Light Profile		TLP

Animated Vector Field		VFA_		
Camera Anim			CA_		
Color Curve			Curve_		_Color	
Curve Table			Curve_		_Table	
Data Asset			*_		
Data Table			DT_		
Float Curve			Curve_		_Float	
Foliage Type			FT_		
Force Feedback Effect		FFE_		
Landscape Grass Type		LG_		
Landscape Layer			LL_		
Matinee Data			Matinee_		
Media Player			MP_		
Object Library			OL_		
Sprite Sheet			SS_		
Static Vector Field		VF_		
Substance Graph Instance	SGI_		
Substance Instance Factory	SIF_		
Touch Interface Setup		TI_		
Vector Curve			Curve_		_Vector

Paper Flipbook			PFB_		
Sprite				SPR_		
Sprite Atlas Group		SPRG_		
Tile Map			TM_		
Tile Set			TS_

Physics Material		PM_		
Physics Asset			Sk_		_PhysicsAsset		
Destructible Mesh		DM_

Dialogue Voice			DV_		
Dialogue Wave			DW_		
Media Sound Wave		MSW_		
Reverb Effect			Reverb_		
Sound Attenuation		ATT_		
Sound Concurrency				_SC	
Sound Cue			S_		_Cue	
Sound Mix			Mix_		
Sound Wave			SW_

Font				Font_		
Slate Brush			Brush_		
Slate Widget Style		Style_		
Widget Blueprint		WBP_

Particle System			PS_		
Material (Post Process)		PP_